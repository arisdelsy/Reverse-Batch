program demo;

#include reverse.iri 

--Screens
  g_ciMain    : constant integer := 14;
  g_ciCust    : constant integer := 2;
  g_ciProduct : constant integer := 4;
  g_ciYN      : constant integer := 5;
  g_ciSetup   : constant integer := 10;
  g_ciBatch   : constant integer := 1;
  g_ciaddcust : constant integer := 8;
  g_ciScales  : constant integer := 9;

  -- Global/Types variables definitions 
  g_sSetupPassword : stored string;
  g_iDownload : stored integer;
  g_sTmpPassword : string;  
  g_rCountby : real;    
  --g_bUpdate : boolean;
  g_iDecimal1 : integer;  
  g_uUnits : Units; 
  g_sysResult : SysCode;   
  g_iDebug : integer;
  g_rScaleEmptyWeight : stored real;
  g_rScaleDischargeTime : stored real;
  g_iRecipeId : stored integer;  
  g_iTotalNbrIngredients : integer;    
  g_iCurrentIngredient : integer;    
  g_iDelayCnt : integer; 
  g_iWidget : integer;    

  --Entry Modes
  NoMode              : constant integer := 0;
  CustomerSelectMode  : constant integer := 1000;
  RecipeSelectMode    : constant integer := 1001;
  SetupMenuMode       : constant integer := 1002;
  BatchMode           : constant integer := 1003;
  AutoPrintMode       : constant integer := 1004;
  ManualPrintMode     : constant integer := 1005;
  CustomerProcessMode : constant integer := 1006;
  ProductSelectMode   : constant integer := 1007;

  g_ciMaxRecords            : constant integer := 1000;

  EntryMode : integer;

  type boolean is (False,True); 

  type DisplayRecord is
    record 
      sID : string; 
      sName : string;
			sInDT : string;
      rQty : Real;
    end record;    
  
  type DisplayArrays is array [g_ciMaxRecords] of DisplayRecord;
  g_arDisplay : DisplayArrays;

  ProductDB : ProductDatabase;

  --Temp variables for entry for customer info
  t_order     : integer;
  t_customer  : string;
  t_street    : string;
  t_town      : string;
  t_state     : string;
  t_zip       : integer;


  
  procedure SetupStartTimer(iTimer : integer; iDuration : integer; itmMode : TimerMode);  -- Setup a Timer and Start                                
  begin
  
    SetTimer(iTimer, iDuration);
    SetTimerMode(iTimer, itmMode);
    StartTimer(iTimer);
    
  end;  

  function CalcDecimal(rCountBy : real) : integer;  -- Calculates the amount of decimal positions  
    iDecimal : integer := 0;    
  begin   
         
    while rCountBy < 1.0
    loop    
      iDecimal := iDecimal + 1;
      rCountBy := rCountBy * 10.0;  
     end loop;

     return iDecimal; 
     
  end; 

  procedure ClearWidgetsData;  -- Clear Display  List Screen text boxes
    i : integer;
  begin  
  
    for i := MinL2 to MaxL2
    loop
      SetLabelText(i, Chr$(08));
    end loop;


    --for i := minId to maxName
    --loop
      --SetLabelText(i, Chr$(08));
    --end loop;

  end;

  procedure ClearDisplayListArray;  -- Clear Display List Array
    i : integer;
  begin 
  
    for i := 1 to g_ciMaxRecords 
    loop
      if g_arDisplay[i].sID = Blank then  
        return;
      end if;

      g_arDisplay[i].sID := Blank;
      g_arDisplay[i].sName := Blank; 
			g_arDisplay[i].sInDT := Blank;

    end loop;
         
  end;

  procedure DisplayProductDB; 
    i : integer;
    j : integer;
  begin 

    -- Clear Text Boxes & Widgets
    ClearWidgetsData;
    
    -- Clear Array
    ClearDisplayListArray; 
    
    -- Sort DB or Get Based of Criteria                                       
    ProductDB.Sort(1);                                    
    i := 1; 
    
    -- FillArray
    if ProductDB.GetFirst = SysOk then  

      g_arDisplay[i].sID := ProductDB.ID;  
      --g_arDisplay[i].sName := RealToString(ProductDB.InPWgt,0,g_iDecimal);  
			g_arDisplay[i].sInDT := Time$(InboundDB.DT) + " " + Date$(InboundDB.DT);
      i := 2;            
 
      while InboundDB.GetNext = SysOk  
      loop         
        if i <= g_ciMaxRecords then             
          g_arDisplay[i].sID := InboundDB.ID;  
      		--g_arDisplay[i].sName := RealToString(InboundDB.InPWgt,0,g_iDecimal);  
					g_arDisplay[i].sInDT :=Time$(InboundDB.DT) + " " + Date$(InboundDB.DT);                                                      
          i := i + 1;                          
        end if;       
      end loop; 
      
    end if; 
    
    -- Select Screen, Enable Handlers, Clear Screen and initialize variables
    SelectScreen(g_ciDList);                                       
    i := minLabel;  
    SetSymbolState(g_iWidgetNum, 1);
    g_iPage := 1;          
    j := 1;   
    
    -- Populate Screen
    while g_arDisplay[j].sID <> Blank and j <= g_ciMaxPerScreen   
    loop    
      SetLabelText(i, g_arDisplay[j].sID);
      SetLabelText(i + 1, g_arDisplay[j].sName); 
			SetLabelText(i + 2, g_arDisplay[j].sInDT); 
      i := i + 3;
      j := j + 1;   
    end loop;                            

  end;

  procedure setupScreen; -- populate the setup screen 
  i : integer;
  begin

    -- setting background bars for screens
    for i := 1 to 16
    loop
      Setbargraphlevel(i,100); 
    end loop;
    --SetImageWidgetPath(btnSetup, "local://11.png");

  end;

  procedure Ready;  -- Initialization procedure
  begin
 
    --UnLockMajorKeys;
    setupScreen;
    --SetLabelText(lbSts1, Blank);     
    if GetUnits(1, g_uUnits) = SysOk then
      if GetCountBy(1, g_uUnits, g_rCountby) = SysOk then
        g_iDecimal1 := CalcDecimal(g_rCountby); 
      end if;
    end if;              
    --Paused := No;
    --BatchMode := Complete;  
    --RefreshMainDisplay;
    EntryMode := NoMode;
    SelectScreen(g_ciMain); 
    
  end;

handler WidgetClicked;
  begin

  	DisableHandler(WidgetClicked);
		g_iWidget := EventWidget;
		DisplayStatus("");

    if g_iWidget = btnStrt then
      if EntryMode = NoMode then
        EntryMode := CustomerSelectMode;
        SelectScreen(g_ciCust);
      end if;

    -- this allows for a range of widget numbers for a selection screen (for Customer Selection Screen)
    elsif g_iWidget >= MinL2 and g_iWidget <= MaxL2 then
      EntryMode := CustomerProcessMode;
      SelectScreen(g_ciaddcust);
      
      --SelectScreen(g_ciProduct);

    elsif g_iWidget = btnCont2 or g_iWidget = btnCont1 then
      if EntryMode = CustomerProcessMode then
        EntryMode := ProductSelectMode;
        SelectScreen(g_ciProduct);
      end if;

    elsif g_iWidget >= MinL4 and g_iWidget <= MaxL4 then
      EntryMode := BatchMode;
      SelectScreen(g_ciScales);

    elsif g_iWidget = btnExt2 then
      if EntryMode = CustomerSelectMode then
        EntryMode := NoMode;
        SelectScreen(g_ciMain);
      end if;

    elsif g_iWidget = btnExt4 then
      EntryMode := NoMode;
      SelectScreen(g_ciMain);
 
    elsif g_iWidget = btnPrint then  
      Print(GrossFmt);

    elsif g_iWidget = btnDone then
      EntryMode := NoMode;
      SelectScreen(g_ciMain);
    
    elsif g_iWidget = btnExt12 then
      EntryMode := NoMode;
      SelectScreen(g_ciMain);
    
    end if;

    EnableHandler(WidgetClicked); 
   
  end;


begin

  --DisableSetPoints; 
  --DisplayVersion; 
  --setmenubarcolor("Black");
  Ready;       

end demo; 